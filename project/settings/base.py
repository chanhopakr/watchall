"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import os
import yaml

try:
    from zen.common import environment, config
    config.load(os.path.join(environment.ETC_DIRECTORY,
                             'kt', 'watchall', 'zen.conf'))
except ModuleNotFoundError:
    # Failed load zen module
    config_file = '/opt/zen/etc/kt/watchall/zen.yml'

    if os.path.exists(config_file):
        with open(config_file) as f:
            text = f.read()
        config = yaml.load(text, Loader=yaml.loader.BaseLoader)
    else:
        config = {}

    config_common = config.get('common', {})
    RRD_DIR = config_common.get('Rrd_directory')
    db_engine = config_common.get('DB_ENGINE').lower()
    DB_NAME = config_common.get('DB_NAME')
    DB_HOST = config_common.get('DB_HOST')
    DB_PORT = config_common.get('DB_PORT')
    DB_USER = config_common.get('DB_USER')
    DB_PASS = config_common.get('DB_PASS')
else:
    # Success load zen module
    RRD_DIR = config.get('common', 'Rrd_directory')
    db_engine = config.get('common', 'DB_ENGINE').lower()
    DB_NAME = config.get('common', 'DB_NAME')
    DB_HOST = config.get('common', 'DB_HOST')
    DB_PORT = config.get('common', 'DB_PORT')
    DB_USER = config.get('common', 'DB_USER')
    DB_PASS = config.get('common', 'DB_PASS')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(BASE_DIR)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '$h&hst5*=ci3#j41f1b_gk@clg&!$$mivsll=oax$@wkv@ge8n'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
# ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    # django
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # apps
    'apps.watchall',
    # third-party-library
    'zen.rpc4django',
    # 'channels',
    # 'django_extensions',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates/apps'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DB_ENGINES = {
    'postgres': 'django.db.backends.postgresql_psycopg2',
    'postgresql': 'django.db.backends.postgresql_psycopg2',
    'mariadb': 'mysql_cymysql',  # 'django.db.backends.mysql'
    'maria': 'mysql_cymysql',  # 'django.db.backends.mysql'
    'mysql': 'mysql_cymysql',  # 'django.db.backends.mysql'
}

DATABASES = {
    'default': {
        'ENGINE': DB_ENGINES.get(db_engine, db_engine),
        'NAME': DB_NAME,
        'HOST': DB_HOST,
        'PORT': DB_PORT,
        'USER': DB_USER,
        'PASSWORD': DB_PASS,
        'CONN_MAX_AGE': 300,    # the maximum lifetime of a connection in secs
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'ko'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

AUTH_USER_MODEL = 'watchall.User'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

ATTACH_ABSPATH = os.path.join(MEDIA_ROOT, 'attach')
if not os.path.exists(ATTACH_ABSPATH):
    os.makedirs(ATTACH_ABSPATH, exist_ok=True)

AUTHENTICATION_BACKENDS = [
    'apps.watchall.authentication.WatchAllBackend',
]

EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_USERNAME = 'SYSTEM'  # custom django setting conf
EMAIL_HOST_USER = 'user@gmail.com'
EMAIL_HOST_PASSWORD = 'password!1'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

# # channels (django third party library) conf
# ASGI_APPLICATION = 'project.routing.application'
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels.layers.InMemoryChannelLayer'
#     }
# }
#
# WS = {
#     'default': {
#         'PROTOCOL': config.get('ws', 'protocol'),
#         'HOST': config.get('ws', 'host'),
#         'PORT': config.get('ws', 'port'),
#     },
#     'develop': {
#         'PROTOCOL': 'http',
#         'HOST': '127.0.0.1',
#         'PORT': 8000
#     },
# }

